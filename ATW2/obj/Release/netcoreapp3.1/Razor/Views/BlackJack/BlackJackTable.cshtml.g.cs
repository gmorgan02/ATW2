#pragma checksum "C:\Git.Projects\ATW2\ATW2\Views\BlackJack\BlackJackTable.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e166de36ae8250019520cdc70064051c9448c86e"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_BlackJack_BlackJackTable), @"mvc.1.0.view", @"/Views/BlackJack/BlackJackTable.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Git.Projects\ATW2\ATW2\Views\_ViewImports.cshtml"
using ATW2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Git.Projects\ATW2\ATW2\Views\_ViewImports.cshtml"
using ATW2.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e166de36ae8250019520cdc70064051c9448c86e", @"/Views/BlackJack/BlackJackTable.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"28711cba5186a40f190f4bdf6167a5e59545dd4b", @"/Views/_ViewImports.cshtml")]
    public class Views_BlackJack_BlackJackTable : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Git.Projects\ATW2\ATW2\Views\BlackJack\BlackJackTable.cshtml"
  
    ViewData["Title"] = "BlackJackView";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<h1>BlackJackTableView</h1>

<div class=""container"">
    <div class=""card"">
        <div class=""card-header"" id=""dealerHeader"">Dealers Hand</div>
        <div class=""card-body""><img class=""deckcard"" id=""DealerCard1"" /><img class=""deckcard"" id=""DealerCard2"" /><img class=""deckcard"" id=""DealerCard3"" /><img class=""deckcard"" id=""DealerCard4"" /><img class=""deckcard"" id=""DealerCard5""  /><img class=""deckcard"" id=""DealerCard6""  /><img class=""deckcard"" id=""DealerCard7""  /><img class=""deckcard"" id=""DealerCard8"" /><img class=""deckcard"" id=""DealerCard9""  /><img class=""deckcard"" id=""DealerCard10""  /><img class=""deckcard"" id=""DealerCard11"" /></div>
    </div>

    <div class=""card margin-top-5"">
        <div class=""card-header"" id=""userHeader"">Your Hand</div>
        <div class=""card-body""><img class=""deckcard"" id=""UserCard1"" /><img class=""deckcard"" id=""UserCard2"" /><img class=""deckcard"" id=""UserCard3"" /><img class=""deckcard"" id=""UserCard4"" /><img class=""deckcard"" id=""UserCard5"" /><img class=""deckcard"" id=""UserCar");
            WriteLiteral(@"d6"" /><img class=""deckcard"" id=""UserCard7"" /><img class=""deckcard"" id=""UserCard8"" /><img class=""deckcard"" id=""UserCard9"" /><img class=""deckcard"" id=""UserCard10"" /><img class=""deckcard"" id=""UserCard11"" /></div>
    </div>

    <input type=""button"" class=""btn btn-primary"" value=""Hit Me"" onclick=""hitMe()"" />
    <input type=""button"" class=""btn btn-primary"" value=""Hold"" onclick=""hold()"" />

</div>    

<script>
    var deck;
    var userCard;
    var dealerCard;
    var dealercard2;
    var userTotal;
    var dealerTotal;
    var dealerCard1;
    var viewedCards;

    $(document).ready(function () {
 
        $.ajax({
            url: ""/Card"",
            type: ""GET"",
            success: function (result) {
                deck = { Id: result[0], cardsRemaining: result[1], shuffled: result[2], success: result[3] };

                $.ajax({
                    
                    url: ""/Card/"" + deck.Id + ""/draw/2"",
                    type: ""GET"",
                    success: func");
            WriteLiteral(@"tion (result) {
                        var dealerCard1 = { Code: result[0], Image: result[1], Suit: result[2], Value: result[3] }
                        dealerCard2 = { Code: result[4], Image: result[5], Suit: result[6], Value: result[7] }

                        if (dealerCard1.Value == ""ACE"" || dealerCard1.Value == ""KING"" || dealerCard1.Value == ""QUEEN"" || dealerCard1.Value == ""JACK"") {
                            dealerCard1.Value = 10
                        }
                        if (dealerCard2.Value == ""ACE"" || dealerCard2.Value == ""KING"" || dealerCard2.Value == ""QUEEN"" || dealerCard2.Value == ""JACK"") {
                            dealerCard2.Value = 10
                        }

                        document.getElementById(""DealerCard1"").src = dealerCard1.Image;

                        var card1IntValue = parseInt(dealerCard1.Value);
                        var card2IntValue = parseInt(dealerCard2.Value);

                        viewedCards = [card1IntValue];

            ");
            WriteLiteral(@"            dealerTotal = card1IntValue + card2IntValue;
                    }
                })            

                $.ajax({

                    url: ""/Card/"" + deck.Id + ""/draw/2"",
                    type: ""GET"",
                    success: function (result) {
                        var card1 = { Code: result[0], Image: result[1], Suit: result[2], Value: result[3] }
                        var card2 = { Code: result[4], Image: result[5], Suit: result[6], Value: result[7] }

                        document.getElementById(""UserCard1"").src = card1.Image;
                        document.getElementById(""UserCard2"").src = card2.Image;
                       

                        if (card1.Value == ""ACE"" || card1.Value == ""KING"" || card1.Value == ""QUEEN"" || card1.Value == ""JACK"") {
                            card1.Value = 10
                        }
                        if (card2.Value == ""ACE"" || card2.Value == ""KING"" || card2.Value == ""QUEEN"" || card2.Value == ""JACK"") ");
            WriteLiteral(@"{
                            card2.Value = 10
                        }

                        var card1IntValue = parseInt(card1.Value);
                        var card2IntValue = parseInt(card2.Value);

                        userTotal = card1IntValue + card2IntValue;

                        viewedCards.push(card1IntValue, card2IntValue);

                        document.getElementById(""userHeader"").innerText = ""Your Hand - "" + userTotal.toString();
                        caculateBustProbability();
                    }
                })   
            }
        })
    })

    function hitMe() {
        $.ajax({
            url: ""/Card/"" + deck.Id + ""/draw/1"",
            type: ""GET"",
            success: function (result) {
                var newCard = { Code: result[0], Image: result[1], Suit: result[2], Value: result[3] }


                if (userCard == null) {
                    userCard = 3;
                }
                else {
                    userCar");
            WriteLiteral(@"d++
                }

                if (newCard.Value == ""ACE"" || newCard.Value == ""KING"" || newCard.Value == ""QUEEN"" || newCard.Value == ""JACK"") {
                    newCard.Value = 10
                }

                document.getElementById(""UserCard"" + userCard.toString()).src = newCard.Image;

                var userHandText = document.getElementById(""userHeader"").innerText;

                var matches = userHandText.match(/(\d+)/);

                var userTotal = parseInt(matches[0]);
                var newCardIntValue = parseInt(newCard.Value);

                userTotal = newCardIntValue + userTotal;

                viewedCards.push(newCardIntValue);

                if (userTotal > 21) {
                    document.getElementById(""userHeader"").style.backgroundColor = ""red"";
                    document.getElementById(""userHeader"").innerText = ""Your Hand - Bust"";
                    hold();
                }
                else {
                    document.getEl");
            WriteLiteral(@"ementById(""userHeader"").innerText = ""Your Hand - "" + userTotal.toString();
                    caculateBustProbability();
                }
            }
        })
    } 

    function hold() {
        document.getElementById(""DealerCard2"").src = dealerCard2.Image;

        if (dealerTotal < 16) {
            document.getElementById(""dealerHeader"").innerText = ""Dealer Hand - "" + dealerTotal.toString();
            dealerHitMe();
        }

        document.getElementById(""dealerHeader"").innerText = ""Dealer Hand - "" + dealerTotal.toString();

        setTimeout(() => { location.reload(); }, 5000);
    }

    function dealerHitMe() {
        $.ajax({
            url: ""/Card/"" + deck.Id + ""/draw/1"",
            type: ""GET"",
            success: function (result) {
                var newCard = { Code: result[0], Image: result[1], Suit: result[2], Value: result[3] }


                if (dealerCard == null) {
                    dealerCard = 3;
                }
                els");
            WriteLiteral(@"e {
                    dealerCard++
                }

                if (newCard.Value == ""ACE"" || newCard.Value == ""KING"" || newCard.Value == ""QUEEN"" || newCard.Value == ""JACK"") {
                    newCard.Value = 10
                }

                document.getElementById(""DealerCard"" + dealerCard.toString()).src = newCard.Image;

                var newCardIntValue = parseInt(newCard.Value);

                dealerTotal = newCardIntValue + dealerTotal;

                if (dealerTotal > 21) {
                    document.getElementById(""dealerHeader"").style.backgroundColor = ""red"";
                    document.getElementById(""dealerHeader"").innerText = ""Dealer Hand - Bust"";
                }
                else {
                    document.getElementById(""dealerHeader"").innerText = ""Dealer Hand - "" + dealerTotal.toString();
                }

                hold();
            }
        })
    }   

    function caculateBustProbability() {
        var deckValues = [2,");
            WriteLiteral(@" 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10];
        var iCount = 0;
        var mergedValues = [];

        viewedCards.forEach(function(value) {
            deckValues.splice(value, 1);
           
            if (iCount != 0) {
                mergedValues.push(value);
            }
            
            iCount++;
        });

        var sumTotalValues = mergedValues.reduce(function (oldValue, newValue) {
            return oldValue + newValue;
        }, 0);

        var remainderToBust = 21 - sumTotalValues;
       

        var filteredArray = deckValues.filter(function (value, index, arr) {
            return value > remainderToBust;
        });

        var totalUnknownCards = 52 - iCount;



        var decimalToBust = filteredArray.length / totalUnknownCards;

        var percentage = (decimalToBust * 100).toFixed(1);

        document.getElementById(");
            WriteLiteral("\"userHeader\").innerText = \"User Hand - \" + userTotal.toString() + \" - Percentage to Bust - \" + percentage.toString() + \"%\";\r\n    }\r\n\r\n</script>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
