#pragma checksum "C:\Git.Projects\ATW2\ATW2\Views\BlackJack\BlackJackTable.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "df74d600450dc3b8120a516de5277de0c314f042"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_BlackJack_BlackJackTable), @"mvc.1.0.view", @"/Views/BlackJack/BlackJackTable.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Git.Projects\ATW2\ATW2\Views\_ViewImports.cshtml"
using ATW2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Git.Projects\ATW2\ATW2\Views\_ViewImports.cshtml"
using ATW2.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"df74d600450dc3b8120a516de5277de0c314f042", @"/Views/BlackJack/BlackJackTable.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"28711cba5186a40f190f4bdf6167a5e59545dd4b", @"/Views/_ViewImports.cshtml")]
    public class Views_BlackJack_BlackJackTable : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/jquery/dist/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Git.Projects\ATW2\ATW2\Views\BlackJack\BlackJackTable.cshtml"
  
    ViewData["Title"] = "BlackJackView";

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "df74d600450dc3b8120a516de5277de0c314f0423760", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "df74d600450dc3b8120a516de5277de0c314f0424022", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<h1>BlackJackTableView</h1>

<div class=""container"">
    <div class=""card"">
        <div class=""card-header"" id=""dealerHeader"">Dealers Hand</div>
        <div class=""card-body""><img class=""deckcard"" id=""DealerCard1"" /><img class=""deckcard"" id=""DealerCard2"" /><img class=""deckcard"" id=""DealerCard3"" /><img class=""deckcard"" id=""DealerCard4"" /><img class=""deckcard"" id=""DealerCard5"" /><img class=""deckcard"" id=""DealerCard6"" /><img class=""deckcard"" id=""DealerCard7"" /><img class=""deckcard"" id=""DealerCard8"" /><img class=""deckcard"" id=""DealerCard9"" /><img class=""deckcard"" id=""DealerCard10"" /><img class=""deckcard"" id=""DealerCard11"" /></div>
    </div>

    <div class=""card margin-top-5"">
        <div class=""card-header"" id=""userHeader"">Your Hand</div>
        <div class=""card-body""><img class=""deckcard"" id=""UserCard1"" /><img class=""deckcard"" id=""UserCard2"" /><img class=""deckcard"" id=""UserCard3"" /><img class=""deckcard"" id=""UserCard4"" /><img class=""deckcard"" id=""UserCard5"" /><img class=""deckcard"" id=""UserCard6""");
            WriteLiteral(@" /><img class=""deckcard"" id=""UserCard7"" /><img class=""deckcard"" id=""UserCard8"" /><img class=""deckcard"" id=""UserCard9"" /><img class=""deckcard"" id=""UserCard10"" /><img class=""deckcard"" id=""UserCard11"" /></div>
    </div>

    <input type=""button"" class=""btn btn-primary"" value=""Hit Me"" onclick=""hitMe()"" />
    <input type=""button"" class=""btn btn-primary"" value=""Hold"" onclick=""hold()"" />

</div>

TODO

    Add values and blackjack rules (21 < bust) 2h
    Track cards do percentage of bust chance (Number of unknown cards left that would make you go bust / Number of unknown cards) 1h
    test plan 2h
    bugs 2h
    publish 2h 
    

<script>
    var deck;
    var userCard;
    var dealerCard;
    var dealercard2;
    var userTotal;
    var dealerTotal;
    var dealerCard1;
    var viewedCards;

    $(document).ready(function () {
 
        $.ajax({
            url: ""https://localhost:44386/Card"",
            type: ""GET"",
            success: function (result) {
                deck ");
            WriteLiteral(@"= { Id: result[0], cardsRemaining: result[1], shuffled: result[2], success: result[3] };

                $.ajax({
                    
                    url: ""https://localhost:44386/Card/"" + deck.Id + ""/draw/2"",
                    type: ""GET"",
                    success: function (result) {
                        var dealerCard1 = { Code: result[0], Image: result[1], Suit: result[2], Value: result[3] }
                        dealerCard2 = { Code: result[4], Image: result[5], Suit: result[6], Value: result[7] }

                        if (dealerCard1.Value == ""ACE"" || dealerCard1.Value == ""KING"" || dealerCard1.Value == ""QUEEN"" || dealerCard1.Value == ""JACK"") {
                            dealerCard1.Value = 10
                        }
                        if (dealerCard2.Value == ""ACE"" || dealerCard2.Value == ""KING"" || dealerCard2.Value == ""QUEEN"" || dealerCard2.Value == ""JACK"") {
                            dealerCard2.Value = 10
                        }

                       ");
            WriteLiteral(@" document.getElementById(""DealerCard1"").src = dealerCard1.Image;

                        var card1IntValue = parseInt(dealerCard1.Value);
                        var card2IntValue = parseInt(dealerCard2.Value);

                        viewedCards = [card1IntValue];

                        dealerTotal = card1IntValue + card2IntValue;
                    }
                })            

                $.ajax({

                    url: ""https://localhost:44386/Card/"" + deck.Id + ""/draw/2"",
                    type: ""GET"",
                    success: function (result) {
                        var card1 = { Code: result[0], Image: result[1], Suit: result[2], Value: result[3] }
                        var card2 = { Code: result[4], Image: result[5], Suit: result[6], Value: result[7] }

                        document.getElementById(""UserCard1"").src = card1.Image;
                        document.getElementById(""UserCard2"").src = card2.Image;
                       

                 ");
            WriteLiteral(@"       if (card1.Value == ""ACE"" || card1.Value == ""KING"" || card1.Value == ""QUEEN"" || card1.Value == ""JACK"") {
                            card1.Value = 10
                        }
                        if (card2.Value == ""ACE"" || card2.Value == ""KING"" || card2.Value == ""QUEEN"" || card2.Value == ""JACK"") {
                            card2.Value = 10
                        }

                        var card1IntValue = parseInt(card1.Value);
                        var card2IntValue = parseInt(card2.Value);

                        userTotal = card1IntValue + card2IntValue;

                        viewedCards += [card1IntValue, card2IntValue];

                        document.getElementById(""userHeader"").innerText = ""Your Hand - "" + userTotal.toString();
                    }
                })   
            }
        })
    })

    function hitMe() {
        $.ajax({
            url: ""https://localhost:44386/Card/"" + deck.Id + ""/draw/1"",
            type: ""GET"",
            suc");
            WriteLiteral(@"cess: function (result) {
                var newCard = { Code: result[0], Image: result[1], Suit: result[2], Value: result[3] }


                if (userCard == null) {
                    userCard = 3;
                }
                else {
                    userCard++
                }

                if (newCard.Value == ""ACE"" || newCard.Value == ""KING"" || newCard.Value == ""QUEEN"" || newCard.Value == ""JACK"") {
                    newCard.Value = 10
                }

                document.getElementById(""UserCard"" + userCard.toString()).src = newCard.Image;

                var userHandText = document.getElementById(""userHeader"").innerText;

                var matches = userHandText.match(/(\d+)/);

                var userTotal = parseInt(matches[0]);
                var newCardIntValue = parseInt(newCard.Value);

                userTotal = newCardIntValue + userTotal;

                viewedCards += [newCardIntValue];

                if (userTotal > 21) {
       ");
            WriteLiteral(@"             document.getElementById(""userHeader"").style.backgroundColor = ""red"";
                    document.getElementById(""userHeader"").innerText = ""Your Hand - Bust"";
                    hold();
                }
                else {
                    document.getElementById(""userHeader"").innerText = ""Your Hand - "" + userTotal.toString();
                }
            }
        })
    } 

    function hold() {
        document.getElementById(""DealerCard2"").src = dealerCard2.Image;

        if (dealerTotal < 16) {
            document.getElementById(""dealerHeader"").innerText = ""Dealer Hand - "" + dealerTotal.toString();
            dealerHitMe();
        }

        document.getElementById(""dealerHeader"").innerText = ""Dealer Hand - "" + dealerTotal.toString();

        setTimeout(() => { location.reload(); }, 5000);
    }

    function dealerHitMe() {
        $.ajax({
            url: ""https://localhost:44386/Card/"" + deck.Id + ""/draw/1"",
            type: ""GET"",
            s");
            WriteLiteral(@"uccess: function (result) {
                var newCard = { Code: result[0], Image: result[1], Suit: result[2], Value: result[3] }


                if (dealerCard == null) {
                    dealerCard = 3;
                }
                else {
                    dealerCard++
                }

                if (newCard.Value == ""ACE"" || newCard.Value == ""KING"" || newCard.Value == ""QUEEN"" || newCard.Value == ""JACK"") {
                    newCard.Value = 10
                }

                document.getElementById(""DealerCard"" + dealerCard.toString()).src = newCard.Image;

                var newCardIntValue = parseInt(newCard.Value);

                dealerTotal = newCardIntValue + dealerTotal;

                if (dealerTotal > 21) {
                    document.getElementById(""dealerHeader"").style.backgroundColor = ""red"";
                    document.getElementById(""dealerHeader"").innerText = ""Dealer Hand - Bust"";
                }
                else {
                ");
            WriteLiteral("    document.getElementById(\"dealerHeader\").innerText = \"Dealer Hand - \" + dealerTotal.toString();\r\n                }\r\n\r\n                hold();\r\n            }\r\n        })\r\n    }   \r\n  \r\n\r\n</script>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
